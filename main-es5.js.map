{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/auth/models/scopes-builder.ts","webpack:///src/app/auth/token.service.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/models/session.ts","webpack:///src/app/phase/open-phase/open-phase.component.ts","webpack:///src/app/phase/open-phase/open-phase.component.html","webpack:///src/app/phase/reveal-phase/reveal-phase.component.ts","webpack:///src/app/phase/reveal-phase/reveal-phase.component.html","webpack:///src/app/phase/started-phase/started-phase.component.ts","webpack:///src/app/phase/started-phase/started-phase.component.html","webpack:///src/app/phase/voting-phase/voting-phase.component.ts","webpack:///src/app/phase/voting-phase/voting-phase.component.html","webpack:///src/app/search/search.component.ts","webpack:///src/app/search/search.component.html","webpack:///src/app/search/search.service.ts","webpack:///src/app/services/firebase/firebase.service.ts","webpack:///src/app/services/user/user.service.ts","webpack:///src/app/session/add-category/add-category.component.ts","webpack:///src/app/session/add-category/add-category.component.html","webpack:///src/app/session/add-pick/add-pick.component.html","webpack:///src/app/session/add-pick/add-pick.component.ts","webpack:///src/app/session/add-session/add-session.component.html","webpack:///src/app/session/add-session/add-session.component.ts","webpack:///src/app/session/join-session/join-session.component.html","webpack:///src/app/session/join-session/join-session.component.ts","webpack:///src/app/session/session-admin/session-admin.component.ts","webpack:///src/app/session/session-admin/session-admin.component.html","webpack:///src/app/session/session-details/session-details.component.html","webpack:///src/app/session/session-details/session-details.component.ts","webpack:///src/app/session/session.service.ts","webpack:///src/app/session/show-all-categories/show-all-categories.component.html","webpack:///src/app/session/show-all-categories/show-all-categories.component.ts","webpack:///src/app/session/show-all-sessions/show-all-sessions.component.html","webpack:///src/app/session/show-all-sessions/show-all-sessions.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","loadChildren","m","AuthModule","AppRoutingModule","forRoot","imports","AppComponent","authService","userService","navbarOpen","loggedIn$","authorized$","checkAuthStatus","authorizedUser$","pipe","authorized","getUser","authorize","logout","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AuthService","http","token","storage","requestAuthUrl","tokenUrl","_authorized","asObservable","fullAuthFlow","clearToken","next","state","get","payload","append","spotifyClientId","spotifyRedirect","requestToken","response","setRefreshTimer","expires_in","refreshToken","expired","strRandom","codeVerifier","set","codeVerifierHash","toString","Base64","codeChallenge","replace","params","encodeURIComponent","build","window","location","href","join","expiresIn","subscribe","console","log","options","headers","post","toPromise","setAuthToken","length","result","characters","charactersLength","i","charAt","Math","floor","random","providedIn","ScopesBuilder","scopes","USERS","PLAYLISTS","args","buffer","forEach","scope","push","Object","property","READ_PRIVATE","READ_EMAIL","MODIFY_PRIVATE","MODIFY_PPUBLIC","READ_COLLABORATIVE","HISTORY","TOP_READ","READ_RECENTLY_PLAYED","LIBRARY","READ","MODIFY","CONNECT","READ_CURRENTLY_PLAYING","MODIFY_PLAYBACK_STATE","READ_PLAYBACK_STATE","FOLLOW","PLAYBACK","STREAMING","TokenService","access","refresh","clear","spotifyResponse","access_token","refresh_token","timeObj","Date","setSeconds","getSeconds","getTime","expireTime","Authorization","HomeComponent","auth","Session","name","phase","admin","SessionPhase","OpenPhaseComponent","sessionId","RevealPhaseComponent","StartedPhaseComponent","VotingPhaseComponent","SearchComponent","searchService","change","pick","result$","searchInput","nativeElement","event","target","value","term","loading","query","search","detectChanges","songId","emit","SearchService","accessToken","encodeURI","FirebaseService","url","route","data","put","UserService","user","AddCategoryComponent","session","errorMessage","category","addCategory","AddPickComponent","sessionService","changeRef","pickExists","getSongPicks","songPicks","key","prototype","hasOwnProperty","call","questionId","addSongPick","AddSessionComponent","addSessionForm","Open","createSession","sessionLink","JoinSessionComponent","router","form","required","valid","addParticipant","navigate","submit","changeDetection","Default","SessionAdminComponent","SessionDetailsComponent","userLoaded","getSession","results","SessionService","firebaseService","firebaseResponse","songPick","participant","validSess","ShowAllCategoriesComponent","searched","getCategories","categories","ShowAllSessionsComponent","getSessions","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SessionDetailsComponent } from './session/session-details/session-details.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: HomeComponent,\r\n    },\r\n    {\r\n        path: 'login',\r\n        loadChildren: () =>\r\n            import('./auth/auth.module').then((m) => m.AuthModule),\r\n    },\r\n    {\r\n        path: 'sessions/:sessionId',\r\n        component: SessionDetailsComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { UserService } from './services/user/user.service';\r\n\r\n@Component({\r\n    selector: 'rbc-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n    navbarOpen = false;\r\n    loggedIn$: Observable<boolean>;\r\n    authorizedUser$: any;\r\n\r\n    constructor(private authService: AuthService, private userService: UserService) {}\r\n\r\n    ngOnInit() {\r\n        this.loggedIn$ = this.authService.authorized$;\r\n        this.authService.checkAuthStatus();\r\n        this.authorizedUser$ = this.authService.authorized$.pipe(\r\n            switchMap((authorized) => (authorized ? this.userService.getUser() : of(null)))\r\n        );\r\n    }\r\n\r\n    login() {\r\n        this.authService.authorize();\r\n    }\r\n\r\n    logout() {\r\n        this.authService.logout();\r\n    }\r\n}\r\n","<div class=\"wrapper\">\r\n    <div id=\"content\">\r\n        <nav class=\"navbar navbar-expand-lg\">\r\n            <img src=\"../../assets//images/rogue-beats-white.png\" height=\"125\" alt=\"\" [routerLink]=\"'/'\" />\r\n            <ul class=\"list-unstyled\">\r\n                <li *ngIf=\"authorizedUser$ | async as user\" id=\"welcome-user\">\r\n                    <div>Welcome back, {{ user.display_name }}!</div>\r\n                </li>\r\n                <li>\r\n                    <ng-container *ngIf=\"loggedIn$ | async; else showLogin\">\r\n                        <a class=\"btn btn-filled accent\" (click)=\"logout()\">Logout</a>\r\n                    </ng-container>\r\n                    <ng-template #showLogin>\r\n                        <a class=\"btn btn-filled accent\" (click)=\"login()\">Login</a>\r\n                    </ng-template>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div class=\"text-center placeholder\">\r\n            <div *ngIf=\"!(loggedIn$ | async)\">\r\n                <p>To take advantage of rogue beats, you need to <a (click)=\"login()\">authorize the app</a> through\r\n                Spotify.</p>\r\n                <div><a class=\"button mt-2\" (click)=\"login()\">Login</a></div>\r\n            </div>\r\n\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n\r\n    \r\n</div>\r\n","import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SearchComponent } from './search/search.component';\r\nimport { AddCategoryComponent } from './session/add-category/add-category.component';\r\nimport { AddPickComponent } from './session/add-pick/add-pick.component';\r\nimport { AddSessionComponent } from './session/add-session/add-session.component';\r\nimport { JoinSessionComponent } from './session/join-session/join-session.component';\r\nimport { SessionDetailsComponent } from './session/session-details/session-details.component';\r\nimport { ShowAllCategoriesComponent } from './session/show-all-categories/show-all-categories.component';\r\nimport { ShowAllSessionsComponent } from './session/show-all-sessions/show-all-sessions.component';\r\nimport { OpenPhaseComponent } from './phase/open-phase/open-phase.component';\r\nimport { StartedPhaseComponent } from './phase/started-phase/started-phase.component';\r\nimport { VotingPhaseComponent } from './phase/voting-phase/voting-phase.component';\r\nimport { RevealPhaseComponent } from './phase/reveal-phase/reveal-phase.component';\r\nimport { SessionAdminComponent } from './session/session-admin/session-admin.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        SearchComponent,\r\n        AddSessionComponent,\r\n        ShowAllSessionsComponent,\r\n        SessionDetailsComponent,\r\n        JoinSessionComponent,\r\n        AddCategoryComponent,\r\n        ShowAllCategoriesComponent,\r\n        AddPickComponent,\r\n        OpenPhaseComponent,\r\n        StartedPhaseComponent,\r\n        VotingPhaseComponent,\r\n        RevealPhaseComponent,\r\n        SessionAdminComponent,\r\n    ],\r\n    imports: [BrowserModule, AppRoutingModule, NgbModule, HttpClientModule, FormsModule, ReactiveFormsModule],\r\n    providers: [],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { LOCAL_STORAGE, StorageService } from 'ngx-webstorage-service';\r\nimport { throwError, timer, Observable, Subject, ReplaySubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ScopesBuilder } from './models/scopes-builder';\r\nimport { SpotifyAuthResponse } from './models/spotify-auth-response';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n    private requestAuthUrl = 'https://accounts.spotify.com/authorize';\r\n    private tokenUrl = 'https://accounts.spotify.com/api/token';\r\n\r\n    // tslint:disable: variable-name\r\n    private _authorized = new ReplaySubject<boolean>();\r\n    public authorized$: Observable<boolean> = this._authorized.asObservable();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private token: TokenService,\r\n        @Inject(LOCAL_STORAGE) private storage: StorageService\r\n    ) {}\r\n\r\n    authorize() {\r\n        this.fullAuthFlow();\r\n    }\r\n\r\n    logout() {\r\n        this.token.clearToken();\r\n        this._authorized.next(false);\r\n    }\r\n\r\n    async getAccessToken(code: string, state: string) {\r\n        if (state !== this.storage.get('state')) {\r\n            throwError('Invalid state');\r\n            return;\r\n        }\r\n\r\n        const payload = new HttpParams()\r\n            .append('client_id', environment.spotifyClientId)\r\n            .append('grant_type', 'authorization_code')\r\n            .append('code', code)\r\n            .append('redirect_uri', environment.spotifyRedirect)\r\n            .append('code_verifier', this.storage.get('codeVerifier'));\r\n\r\n        const response = await this.requestToken(payload);\r\n        this.setRefreshTimer(response.expires_in);\r\n        this._authorized.next(true);\r\n    }\r\n\r\n    checkAuthStatus() {\r\n        if (!this.token.refreshToken) {\r\n            this._authorized.next(false);\r\n        } else if (this.token.expired) {\r\n            this.refreshToken();\r\n        } else {\r\n            this._authorized.next(true);\r\n        }\r\n    }\r\n\r\n    async refreshToken() {\r\n        const payload = new HttpParams()\r\n            .append('grant_type', 'refresh_token')\r\n            .append('refresh_token', this.token.refreshToken)\r\n            .append('client_id', environment.spotifyClientId);\r\n\r\n        const response = await this.requestToken(payload);\r\n        this.setRefreshTimer(response.expires_in);\r\n        this._authorized.next(true);\r\n        return;\r\n    }\r\n\r\n    private fullAuthFlow() {\r\n        const state = this.strRandom(40);\r\n        const codeVerifier = this.strRandom(128);\r\n        this.storage.set('state', state);\r\n        this.storage.set('codeVerifier', codeVerifier);\r\n        const codeVerifierHash = CryptoJS.SHA256(codeVerifier).toString(CryptoJS.enc.Base64);\r\n        const codeChallenge = codeVerifierHash.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\r\n\r\n        const params = [\r\n            'client_id=' + environment.spotifyClientId,\r\n            'response_type=code',\r\n            'redirect_uri=' + encodeURIComponent(environment.spotifyRedirect),\r\n            'code_challenge_method=S256',\r\n            'code_challenge=' + codeChallenge,\r\n            'state=' + state,\r\n            'scope=' + new ScopesBuilder().build(),\r\n        ];\r\n        window.location.href = this.requestAuthUrl + '?' + params.join('&');\r\n    }\r\n\r\n    private async setRefreshTimer(expiresIn: number) {\r\n        timer(expiresIn * 1000).subscribe(() => {\r\n            console.log('Token expiring, refreshing');\r\n            this.refreshToken();\r\n        });\r\n    }\r\n\r\n    private async requestToken(payload: HttpParams): Promise<SpotifyAuthResponse> {\r\n        const options = {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n        };\r\n\r\n        const response = await this.http.post<SpotifyAuthResponse>(this.tokenUrl, payload, options).toPromise();\r\n\r\n        this.token.setAuthToken(response);\r\n\r\n        return response;\r\n    }\r\n\r\n    private strRandom(length: number) {\r\n        let result = '';\r\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        const charactersLength = characters.length;\r\n        for (let i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import { SpotifyScope } from './spotify-scope';\r\n\r\nexport class ScopesBuilder {\r\n\r\n    public static USERS: { [name: string]: SpotifyScope } = {\r\n        READ_PRIVATE: 'user-read-private',\r\n        READ_EMAIL: 'user-read-email'\r\n    };\r\n\r\n    public static PLAYLISTS: { [name: string]: SpotifyScope } = {\r\n        READ_PRIVATE: 'playlist-read-private',\r\n        MODIFY_PRIVATE: 'playlist-modify-private',\r\n        MODIFY_PPUBLIC: 'playlist-modify-public',\r\n        READ_COLLABORATIVE: 'playlist-read-collaborative'\r\n    };\r\n\r\n    public static HISTORY: { [name: string]: SpotifyScope } = {\r\n        TOP_READ: 'user-top-read',\r\n        READ_RECENTLY_PLAYED: 'user-read-recently-played'\r\n    };\r\n\r\n    public static LIBRARY: { [name: string]: SpotifyScope } = {\r\n        READ: 'user-library-read',\r\n        MODIFY: 'user-library-modify'\r\n    };\r\n\r\n    public static CONNECT: { [name: string]: SpotifyScope } = {\r\n        READ_CURRENTLY_PLAYING: 'user-read-currently-playing',\r\n        MODIFY_PLAYBACK_STATE: 'user-modify-playback-state',\r\n        READ_PLAYBACK_STATE: 'user-read-playback-state'\r\n    };\r\n\r\n    public static FOLLOW: { [name: string]: SpotifyScope } = {\r\n        READ: 'user-follow-read',\r\n        MODIFY: 'user-follow-modify'\r\n    };\r\n\r\n    public static PLAYBACK: { [name: string]: SpotifyScope } = {\r\n        STREAMING: 'streaming'\r\n    };\r\n\r\n    private scopes: ({ [name: string]: SpotifyScope } | SpotifyScope)[] = [\r\n        ScopesBuilder.USERS,\r\n        ScopesBuilder.PLAYLISTS\r\n    ];\r\n\r\n    /**\r\n     *\r\n     * @param args [] means no particular scopes or public only\r\n     */\r\n    public withScopes(...args: ({ [name: string]: SpotifyScope } | SpotifyScope)[]): ScopesBuilder {\r\n        this.scopes = args;\r\n        return this;\r\n    }\r\n\r\n    public build(): string {\r\n\r\n        const buffer: string[] = [];\r\n\r\n        this.scopes.forEach(scope => {\r\n\r\n            if (typeof (scope) === 'string') {\r\n                buffer.push(scope);\r\n            } else {\r\n                Object.keys(scope).forEach((property) => buffer.push(scope[property]));\r\n            }\r\n        });\r\n\r\n        return buffer.join(' ');\r\n    }\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { SpotifyAuthResponse } from './models/spotify-auth-response';\r\nimport { LOCAL_STORAGE, StorageService } from 'ngx-webstorage-service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TokenService {\r\n    private access: string;\r\n    private refresh: string;\r\n    private expireTime: number;\r\n\r\n    constructor(@Inject(LOCAL_STORAGE) private storage: StorageService) {}\r\n\r\n    public get accessToken(): string {\r\n        return this.access ? this.access : this.storage.get('access');\r\n    }\r\n\r\n    public get refreshToken(): string {\r\n        return this.refresh ? this.refresh : this.storage.get('refresh');\r\n    }\r\n\r\n    public get expired(): boolean {\r\n        const expiresIn = this.expireTime ? this.expireTime : this.storage.get('expire_time');\r\n        return expiresIn < new Date().getTime();\r\n    }\r\n\r\n    public clearToken(): void {\r\n        this.access = null;\r\n        this.refresh = null;\r\n        this.storage.clear();\r\n    }\r\n\r\n    public get authHeader(): { [name: string]: string } {\r\n        return this.access ? { Authorization: `Bearer ${this.access}` } : {};\r\n    }\r\n\r\n    public setAuthToken(spotifyResponse: SpotifyAuthResponse) {\r\n        if (spotifyResponse.access_token && spotifyResponse.refresh_token) {\r\n            this.storage.set('access', spotifyResponse.access_token);\r\n            this.access = spotifyResponse.access_token;\r\n            this.storage.set('refresh', spotifyResponse.refresh_token);\r\n            this.refresh = spotifyResponse.refresh_token;\r\n\r\n            const timeObj = new Date();\r\n            timeObj.setSeconds(timeObj.getSeconds() + spotifyResponse.expires_in);\r\n\r\n            this.storage.set('expire_time', timeObj.getTime());\r\n            this.expireTime = timeObj.getTime();\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { UserService } from '../services/user/user.service';\r\nimport { of } from 'rxjs';\r\nimport { User } from '../services/user/user';\r\n\r\n@Component({\r\n    selector: 'rbc-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    public authorizedUser$;\r\n    public activePanel: string;\r\n\r\n    constructor(private auth: AuthService, private userService: UserService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.authorizedUser$ = this.auth.authorized$.pipe(\r\n            switchMap((authorized) => (authorized ? this.userService.getUser() : of(null)))\r\n        );\r\n    }\r\n}\r\n","<div *ngIf=\"authorizedUser$ | async as user\">\r\n    <div class=\"rbc-card\">\r\n        <div class=\"card-label\">\r\n            Main Menu\r\n        </div>\r\n        <div class=\"accordion-container card-content\">\r\n            <button class=\"accordion\" (click)=\"activePanel = 'create'\" [ngClass]=\"{'active': activePanel === 'create'}\">Create Session</button>\r\n            <div class=\"panel\" *ngIf=\"activePanel === 'create'\">\r\n                <rbc-add-session></rbc-add-session>\r\n            </div>\r\n    \r\n            <button class=\"accordion\" (click)=\"activePanel = 'join'\" [ngClass]=\"{'active': activePanel === 'join'}\">Join Session</button>\r\n            <div class=\"panel\" *ngIf=\"activePanel === 'join'\">\r\n                <rbc-join-session></rbc-join-session>\r\n            </div>\r\n    \r\n            <button class=\"accordion\" (click)=\"activePanel = 'howTo'\" [ngClass]=\"{'active': activePanel === 'howTo'}\">How to Play</button>\r\n            <div class=\"panel\" *ngIf=\"activePanel === 'howTo'\">\r\n                <p>Rogue Beats is a thing</p>\r\n                <p>and to use it, you should do some things</p>\r\n                <p>and then everyone is happy.</p>\r\n            </div>\r\n        </div>  \r\n    </div>\r\n            \r\n</div>\r\n","import { User } from '../services/user/user';\r\n\r\nexport class Session {\r\n    constructor(name: string, phase: SessionPhase, admin: User) {\r\n        this.name = name;\r\n        this.admin = admin;\r\n        this.phase = phase;\r\n    }\r\n\r\n    public name: string;\r\n    public admin: User;\r\n    public phase: SessionPhase;\r\n}\r\n\r\nexport enum SessionPhase {\r\n    Open,\r\n    Started,\r\n    Voting,\r\n    Reveal\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'rbc-open-phase',\r\n    templateUrl: './open-phase.component.html',\r\n    styleUrls: ['./open-phase.component.scss'],\r\n})\r\nexport class OpenPhaseComponent implements OnInit {\r\n    @Input() sessionId;\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit(): void {}\r\n}\r\n","<div class=\"category-section rbc-card\">\r\n    <div class=\"card-column card-label\">\r\n        Categories\r\n    </div>\r\n    <div class=\"card-column card-content\">\r\n        <div>\r\n            <rbc-show-all-categories [sessionId]=\"sessionId\"></rbc-show-all-categories>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'rbc-reveal-phase',\n  templateUrl: './reveal-phase.component.html',\n  styleUrls: ['./reveal-phase.component.scss']\n})\nexport class RevealPhaseComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>reveal-phase works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'rbc-started-phase',\n  templateUrl: './started-phase.component.html',\n  styleUrls: ['./started-phase.component.scss']\n})\nexport class StartedPhaseComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>started-phase works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'rbc-voting-phase',\n  templateUrl: './voting-phase.component.html',\n  styleUrls: ['./voting-phase.component.scss']\n})\nexport class VotingPhaseComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>voting-phase works!</p>\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    OnInit,\r\n    Output,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { SearchService } from './search.service';\r\nimport { fromEvent, Observable, of, timer } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, filter, map, switchMap, tap, timeout } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'rbc-search',\r\n    templateUrl: './search.component.html',\r\n    styleUrls: ['./search.component.scss'],\r\n})\r\nexport class SearchComponent implements AfterViewInit {\r\n    @ViewChild('searchBox') searchInput: ElementRef;\r\n    @Output() pick = new EventEmitter();\r\n    result$: Observable<any>;\r\n\r\n    loading: boolean;\r\n    errored: boolean;\r\n\r\n    constructor(private searchService: SearchService, private change: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit(): void {\r\n        //this.searchInput.nativeElement.focus();\r\n\r\n        (this.result$ = fromEvent<any>(this.searchInput.nativeElement, 'keyup').pipe(\r\n            map((event) => event.target.value),\r\n            debounceTime(250),\r\n            filter((term) => term),\r\n            distinctUntilChanged(),\r\n            tap(() => (this.loading = true)),\r\n            switchMap(\r\n                (query) => this.searchService.search(query)\r\n                // .pipe(\r\n                //     timeout(2500),\r\n                //     catchError((err) => {\r\n                //         this.errored = true;\r\n                //         timer(2000).subscribe(() => (this.errored = false));\r\n                //         return of(null);\r\n                //     })\r\n            )\r\n        )),\r\n            tap(() => (this.loading = false));\r\n\r\n        this.change.detectChanges();\r\n    }\r\n\r\n    pickSong(songId: string) {\r\n        this.pick.emit(songId);\r\n    }\r\n}\r\n","<div>\r\n    <div>\r\n        <input #searchBox class=\"input is-large is-info\" type=\"text\" placeholder=\"Search ...\" />\r\n    </div>\r\n\r\n    <div class=\"error is-error\" *ngIf=\"errored\">\r\n        Failed to search spotify.\r\n    </div>\r\n\r\n    <div class=\"search-results\" *ngIf=\"result$ | async as result\">\r\n      <div *ngFor=\"let item of result.tracks.items\">\r\n          <input type=\"button\" value=\"Pick\" (click)=\"pickSong(item.id)\" />\r\n          <a href=\"{{item.preview_url}}\" target=\"_blank\">{{item.name}}</a> by {{item.artists[0].name}}\r\n      </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { retryWhen } from 'rxjs/operators';\r\nimport { TokenService } from '../auth/token.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SearchService {\r\n    private requestAuthUrl = 'https://api.spotify.com/v1/search?type=track&q=';\r\n\r\n    constructor(private http: HttpClient, private token: TokenService) {}\r\n\r\n    public async search(query: string): Promise<any> {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                Authorization: 'Bearer ' + this.token.accessToken,\r\n            }),\r\n        };\r\n        // want%20it%20that%20way\r\n        return this.http\r\n            .get(this.requestAuthUrl + encodeURI(query), options)\r\n            .toPromise();\r\n    }\r\n    // public async getUser(): Promise<User> {\r\n    //   const options = {\r\n    //     headers: new HttpHeaders({ Authorization: 'Bearer ' + this.token.oAuthToken })\r\n    //   };\r\n\r\n  // search(name: string): Observable<any> {\r\n  //   const options = {\r\n  //     headers: new HttpHeaders({ Authorization: 'Bearer ' + this.token.oAuthToken })\r\n  //   };\r\n\r\n  //   return this.http\r\n  //       .get<any>(this.requestAuthUrl + encodeURI(name), options);\r\n  //       //.pipe(retryWhen(genericRetryStrategy({ maxRetryAttempts: 2, scalingDuration: 500 })));\r\n  // }\r\n    //   if (!this.user) {\r\n    //     this.user = await this.http.get<User>(this.requestAuthUrl, options).toPromise();\r\n    //   }\r\n\r\n    //   return this.user;\r\n    // }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FirebaseService {\r\n    public url = 'https://rogue-beats-b003b.firebaseio.com';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    post<T>(route: string, data: any): Observable<T> {\r\n        return this.http.post<T>(`${this.url}/${route}`, data);\r\n    }\r\n\r\n    put<T>(route: string, data: any): Observable<T> {\r\n        return this.http.put<T>(`${this.url}/${route}`, data);\r\n    }\r\n\r\n    get<T>(route: string): Observable<T> {\r\n        return this.http.get<T>(`${this.url}/${route}`);\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TokenService } from '../../auth/token.service';\r\nimport { User } from './user';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class UserService {\r\n    private requestAuthUrl = 'https://api.spotify.com/v1/me';\r\n    private user: User;\r\n\r\n    constructor(private http: HttpClient, private token: TokenService) {}\r\n\r\n    public async getUser(): Promise<User> {\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                Authorization: 'Bearer ' + this.token.accessToken,\r\n            }),\r\n        };\r\n\r\n        if (!this.user) {\r\n            this.user = await this.http.get<User>(this.requestAuthUrl, options).toPromise();\r\n        }\r\n\r\n        return this.user;\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Category } from '../../models/category';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-add-category',\r\n    templateUrl: './add-category.component.html',\r\n    styleUrls: ['./add-category.component.scss'],\r\n})\r\nexport class AddCategoryComponent implements OnInit {\r\n    @Input() sessionId: string;\r\n    errorMessage: string = '';\r\n    category = '';\r\n\r\n    constructor(private session: SessionService, private change: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {}\r\n\r\n    addCategory() {\r\n        const result = this.session.addCategory(this.sessionId, { category: this.category } as Category);\r\n        console.log(this.session);\r\n        this.category = '';\r\n        this.change.detectChanges();\r\n    }\r\n}\r\n","<div>\r\n  <label>\r\n    <input type=\"text\" [(ngModel)]=\"category\" placeholder=\"Category Description\" #categoryInput/>\r\n  </label>\r\n  <div *ngIf=\"errorMessage\">\r\n    {{ errorMessage }}\r\n  </div>\r\n\r\n  <div>\r\n    <button class=\"btn btn-outline accent\" type=\"submit\" (click)=\"addCategory(); categoryInput.value = ''\">Add Category</button>\r\n  </div>\r\n</div>\r\n","<div class=\"add-pick\">\r\n    <div *ngIf=\"isLoading\">\r\n      Loading...\r\n    </div>\r\n    <div *ngIf=\"isLoading == false\">\r\n        <div *ngIf=\"pickExists\">\r\n            You've submitted a pick for this question.\r\n            <br/>\r\n        </div>\r\n        <div *ngIf=\"!pickExists\">\r\n            <rbc-search (pick)=\"pickSong($event)\"></rbc-search>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { SongPick } from '../../models/song-pick';\r\nimport { User } from '../../services/user/user';\r\nimport { UserService } from '../../services/user/user.service';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-add-pick',\r\n    templateUrl: './add-pick.component.html',\r\n    styleUrls: ['./add-pick.component.scss'],\r\n})\r\nexport class AddPickComponent implements OnInit {\r\n    @Input() sessionId: string;\r\n    @Input() questionId: string;\r\n    pickExists = false;\r\n    public loading: boolean;\r\n    public user: User;\r\n\r\n    constructor(private sessionService: SessionService, private userService: UserService, private changeRef: ChangeDetectorRef) {}\r\n\r\n    async ngOnInit() {\r\n        this.loading = true;\r\n\r\n        this.user = await this.userService.getUser();\r\n\r\n        const songPicks = await this.sessionService.getSongPicks(this.sessionId);\r\n\r\n        for (const key in songPicks) {\r\n          if (Object.prototype.hasOwnProperty.call(songPicks, key)) {\r\n            const value = songPicks[key];\r\n            if (value?.questionId === this.questionId && value?.user?.id === this.user.id) {\r\n              this.pickExists = true;\r\n            }\r\n          }\r\n        }\r\n        this.loading = false;\r\n        this.changeRef.detectChanges();\r\n    }\r\n\r\n    get isLoading(){\r\n      return this.loading;\r\n  }\r\n\r\n  set isLoading(loading){\r\n      this.loading = loading;\r\n  }\r\n\r\n    pickSong(songId: string) {\r\n        this.sessionService.addSongPick(this.sessionId, { questionId: this.questionId, songId: songId, user: this.user } as SongPick);\r\n        this.pickExists = true;\r\n    }\r\n}\r\n","<form [formGroup]=\"addSessionForm\" (ngSubmit)=\"createSession()\" class=\"mb-4\">\r\n    <label>\r\n        Name:\r\n        <input type=\"text\" formControlName=\"name\"/>\r\n    </label>\r\n\r\n    <div>\r\n        <button class=\"btn button\" type=\"submit\" [disabled]=\"!addSessionForm.valid\">Create Session</button>\r\n    </div>\r\n</form>\r\n\r\n<p class=\"mt-4\" *ngIf=\"sessionLink\">\r\n  Session Link: <a href=\"{{ sessionLink }}\">{{ sessionLink }}</a>\r\n</p>\r\n\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\n\r\nimport { Session, SessionPhase } from '../../models/session';\r\nimport { UserService } from '../../services/user/user.service';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-add-session',\r\n    templateUrl: './add-session.component.html',\r\n    styleUrls: ['./add-session.component.scss'],\r\n})\r\nexport class AddSessionComponent implements OnInit {\r\n    addSessionForm = new FormGroup({\r\n        name: new FormControl(''),\r\n    });\r\n\r\n    sessionLink: string;\r\n\r\n    constructor(\r\n        private sessionService: SessionService,\r\n        private userService: UserService,\r\n        private change: ChangeDetectorRef\r\n    ) {}\r\n\r\n    ngOnInit() {}\r\n\r\n    async createSession() {\r\n        const admin = await this.userService.getUser();\r\n\r\n        const session = new Session(this.addSessionForm.value.name, SessionPhase.Open, admin);\r\n\r\n        const response = await this.sessionService.createSession(session);\r\n\r\n        this.sessionLink = `http://localhost:4432/sessions/${response}`;\r\n\r\n        this.change.detectChanges();\r\n    }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\" class=\"mb-4\">\r\n    <input type=\"text\" formControlName=\"code\" placeholder=\"Session Code\" />\r\n\r\n    <div>\r\n        <button class=\"btn button\" type=\"submit\" [disabled]=\"!form.valid\">Join Session</button>\r\n    </div>\r\n\r\n    <div class=\"error\" *ngIf=\"errorMessage\">\r\n        {{errorMessage}}\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { UserService } from '../../services/user/user.service';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-join-session',\r\n    templateUrl: './join-session.component.html',\r\n    styleUrls: ['./join-session.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class JoinSessionComponent {\r\n    form = new FormGroup({\r\n        code: new FormControl('', Validators.required),\r\n    });\r\n\r\n    public errorMessage: string;\r\n\r\n    constructor(private sessionService: SessionService,\r\n                private userService: UserService,\r\n                private router: Router,\r\n                private changeRef: ChangeDetectorRef) { }\r\n\r\n    async submit() {\r\n        this.errorMessage = '';\r\n        if (this.form.valid) {\r\n            const sessionId = this.form.value.code;\r\n\r\n            try {\r\n                const user = await this.userService.getUser();\r\n                await this.sessionService.addParticipant(sessionId, user);\r\n                this.router.navigate(['sessions/', sessionId]);\r\n            }\r\n            catch (error) {\r\n                this.errorMessage = error;\r\n            }\r\n\r\n            this.changeRef.detectChanges();\r\n        }\r\n    }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'rbc-session-admin',\r\n  templateUrl: './session-admin.component.html',\r\n  styleUrls: ['./session-admin.component.scss']\r\n})\r\nexport class SessionAdminComponent implements OnInit {\r\n\r\n  @Input() sessionId: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"admin-section rbc-card\">\r\n  <!-- todo: move to game admin component -->\r\n  <div class=\"card-column card-label\">\r\n      Admin\r\n  </div>\r\n  <div class=\"card-column card-content\">\r\n      <div class=\"add-category\">\r\n          <rbc-add-category [sessionId]=\"sessionId\"></rbc-add-category>\r\n      </div>\r\n  </div>\r\n</div>\r\n","<div *ngFor=\"let session of results | keyvalue\">\r\n    <div class=\"session-details rbc-card\">\r\n        <div class=\"card-column card-label\">\r\n            Details\r\n        </div>\r\n        <div class=\"card-column card-content\">\r\n            <p><span class=\"detail-label\">Session Name:</span> {{ session.value.name }}</p>\r\n            <p><span class=\"detail-label\">Created By:</span> {{ session.value.admin?.display_name }}</p>\r\n            <p><span class=\"detail-label\">Session ID:</span> {{ session.key }}</p>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"userLoaded\">\r\n        <rbc-session-admin [sessionId]=\"sessionId\" *ngIf=\"user?.id === session.value?.admin?.id\"></rbc-session-admin>\r\n\r\n        <ng-container [ngSwitch]=\"session.value.phase\">\r\n            <div *ngSwitchDefault>\r\n                <rbc-open-phase [sessionId]=\"sessionId\"></rbc-open-phase>\r\n            </div>\r\n\r\n            <div *ngSwitchCase=\"phase.Started\">\r\n                <span>asks you to submit for the categories (rbc-show-all-categories)</span>\r\n                <rbc-started-phase></rbc-started-phase>\r\n            </div>\r\n\r\n            <div *ngSwitchCase=\"phase.Voting\">\r\n                <span>Asks you to vote for who submitted what</span>\r\n                <rbc-voting-phase></rbc-voting-phase>\r\n            </div>\r\n\r\n            <div *ngSwitchCase=\"phase.Reveal\">\r\n                <span>Shows each submission with your guess and the correct answer</span>\r\n                <rbc-reveal-phase></rbc-reveal-phase>\r\n            </div>\r\n        </ng-container>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, OnChanges, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SessionPhase } from '../../models/session';\r\nimport { User } from '../../services/user/user';\r\nimport { UserService } from '../../services/user/user.service';\r\nimport { FbSession, SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-details',\r\n    templateUrl: './session-details.component.html',\r\n    styleUrls: ['./session-details.component.scss']\r\n})\r\nexport class SessionDetailsComponent implements OnInit {\r\n    public results: FbSession;\r\n    public sessionId: string;\r\n    public user: User;\r\n    public phase = SessionPhase;\r\n    public userLoaded = false;\r\n\r\n    constructor(private sessionService: SessionService, private route: ActivatedRoute, private userService: UserService)  {\r\n        this.route.params.subscribe(params => {\r\n            this.sessionId = params.sessionId;\r\n            this.getSession();\r\n        });\r\n    }\r\n\r\n    async ngOnInit() {\r\n      this.user = await this.userService.getUser();\r\n      //console.log(this.user);\r\n      this.userLoaded = true;\r\n    }\r\n\r\n    async getSession() {\r\n        this.results = await this.sessionService.getSession(this.sessionId);\r\n        //console.log(this.results);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { FirebaseService } from '../services/firebase/firebase.service';\r\nimport { Session } from '../models/session';\r\nimport { Category } from '../models/category';\r\nimport { SongPick } from '../models/song-pick';\r\nimport { User } from '../services/user/user';\r\nimport { FbResponse } from '../models/fb-response';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SessionService {\r\n    private route = 'sessions.json';\r\n    firebaseResponse: { name: string };\r\n\r\n    constructor(private firebaseService: FirebaseService) { }\r\n\r\n    public async createSession(session: Session) {\r\n        await this.firebaseService\r\n            .post(this.route, session)\r\n            .toPromise()\r\n            .then((response) => {\r\n                console.log(response);\r\n                this.firebaseResponse = (response as FbResponse);\r\n                console.log(this.firebaseResponse);\r\n            });\r\n\r\n        return this.firebaseResponse.name;\r\n    }\r\n\r\n    // todo:  each different json could/should be its own service.  eg.  games, picks, sessions, categories\r\n    public async addCategory(sessionId: string, category: Category) {\r\n        const route = `games/${sessionId}/categories.json`;\r\n\r\n        await this.firebaseService\r\n            .post(route, category)\r\n            .toPromise()\r\n            .then((response) => {\r\n                this.firebaseResponse = (response as FbResponse);\r\n            });\r\n\r\n        return this.firebaseResponse.name;\r\n    }\r\n\r\n    public async addSongPick(sessionId: string, songPick: SongPick) {\r\n        const route = `games/${sessionId}/picks.json`;\r\n\r\n        await this.firebaseService\r\n            .post(route, songPick)\r\n            .toPromise()\r\n            .then((response) => {\r\n                this.firebaseResponse = (response as FbResponse);\r\n            });\r\n\r\n        return this.firebaseResponse.name;\r\n    }\r\n\r\n    public async addParticipant(sessionId: string, participant: User) {\r\n        const validSess = await this.getSession(sessionId);\r\n        if (validSess[sessionId]) {\r\n            const route = `games/${sessionId}/participants.json`;\r\n            return this.firebaseService.post<string>(route, participant).toPromise();\r\n        } else {\r\n            throw new Error(('Session not found'));\r\n        }\r\n    }\r\n\r\n    public async getSessions() {\r\n        return await this.firebaseService.get<FbSession>(this.route).toPromise();\r\n    }\r\n\r\n    public async getCategories(sessionId: string) {\r\n        const route = `games/${sessionId}/categories.json`;\r\n\r\n        return await this.firebaseService.get<FbCategory>(route).toPromise();\r\n    }\r\n\r\n    public async getSongPicks(sessionId: string) {\r\n        const route = `games/${sessionId}/picks.json`;\r\n\r\n        return await this.firebaseService.get<FbSongPick>(route).toPromise();\r\n    }\r\n\r\n    public getSession(sessionId): Promise<FbSession> {\r\n        const route = `${this.route}?orderBy=\"$key\"&startAt=\"${sessionId}\"&endAt=\"${sessionId}\"&print=pretty`;\r\n        return this.firebaseService.get<FbSession>(route).toPromise();\r\n    }\r\n}\r\n\r\nexport interface FbSession {\r\n    [id: string]: Session;\r\n}\r\n\r\nexport interface FbCategory {\r\n  [id: string]: Category;\r\n}\r\n\r\nexport interface FbSongPick {\r\n  [id: string]: SongPick;\r\n}\r\n","<div>\r\n    <div *ngIf=\"searched\" class=\"all-sessions\">\r\n        <div *ngFor=\"let session of categories | keyvalue\" class=\"category\">\r\n            <p class=\"category-label\">{{session.value.category ? session.value.category : '**Empty**'}}</p>\r\n            <rbc-add-pick [sessionId]=\"sessionId\" [questionId]=\"session.key\"></rbc-add-pick>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-show-all-categories',\r\n    templateUrl: './show-all-categories.component.html',\r\n    styleUrls: ['./show-all-categories.component.scss'],\r\n})\r\nexport class ShowAllCategoriesComponent implements OnInit {\r\n    @Input() sessionId: string;\r\n    categories: any;\r\n    searched = false;\r\n\r\n    constructor(private sessionService: SessionService, private change: ChangeDetectorRef) {}\r\n\r\n    async ngOnInit() {\r\n        this.categories = await this.sessionService.getCategories(this.sessionId);\r\n        this.searched = true;\r\n        this.change.detectChanges();\r\n    }\r\n}\r\n","<div *ngIf=\"!searched\">\r\n    <button class=\"btn button\" (click)=\"getSessions()\">Get All Sessions</button>\r\n</div>\r\n\r\n<div *ngIf=\"searched\" class=\"all-sessions\">\r\n    <div *ngFor=\"let session of results | keyvalue\">\r\n        <a href=\"/sessions/{{session.key}}\">\r\n        \"{{session.value.category}}\"</a> <br />\r\n        Created by {{session.value.admin?.display_name}}\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Session } from 'src/app/models/session';\r\nimport { SessionService } from '../session.service';\r\n\r\n@Component({\r\n    selector: 'rbc-show-all-sessions',\r\n    templateUrl: './show-all-sessions.component.html',\r\n    styleUrls: ['./show-all-sessions.component.scss'],\r\n})\r\nexport class ShowAllSessionsComponent implements OnInit {\r\n    constructor(private sessionService: SessionService) {}\r\n\r\n    public results: any;\r\n    public searched = false;\r\n\r\n    ngOnInit(): void {}\r\n\r\n    async getSessions() {\r\n        // The type of results:  <{ [id: string]: Session }>\r\n        this.results = await this.sessionService.getSessions();\r\n        this.searched = true;\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  spotifyClientId: '47b78bc5a97140f485f0a5ead97a2145',\r\n  spotifyRedirect: 'http://localhost:4432/login/authorized'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}