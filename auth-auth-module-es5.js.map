{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/spotify-auth/spotify-auth.component.ts","webpack:///src/app/auth/spotify-auth/spotify-auth.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","SpotifyAuthComponent","authService","activatedRoute","router","queryParams","subscribe","params","code","getAccessToken","state","authorized$","pipe","authorized","x","navigate","selector","templateUrl","styleUrls"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMA,MAAM,GAAW,CAAC;AAAEC,YAAI,EAAE,YAAR;AAAsBC,iBAAS,EAAE;AAAjC,OAAD,CAAvB;;UAMaC,iB;;;;;cAAAA;;;;2BAAAA,iB;AAAiB,S;AAAA,kBAHjB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGiB,EAFhB,4DAEgB;;;;4HAAjBG,iB,EAAiB;AAAA;AAAA,oBAFhB,4DAEgB;AAAA,S;AAFJ,O;;;;;wEAEbA,iB,EAAiB;gBAJ7B,sDAI6B;iBAJpB;AACNE,mBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADH;AAENM,mBAAO,EAAE,CAAC,4DAAD;AAFH,W;AAIoB,U;;;;;;;;;;;;;;;;;;ACV9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaC,U;;;;;cAAAA;;;;2BAAAA,U;AAAU,S;AAAA,kBAFV,CAAC,4DAAD,EAAe,sEAAf,CAEU;;;;4HAAVA,U,EAAU;AAAA,yBAHJ,yFAGI;AAHgB,oBACzB,4DADyB,EACX,sEADW;AAGhB,S;AAFsB,O;;;;;wEAEhCA,U,EAAU;gBAJtB,sDAIsB;iBAJb;AACNC,wBAAY,EAAE,CAAC,yFAAD,CADR;AAENH,mBAAO,EAAE,CAAC,4DAAD,EAAe,sEAAf;AAFH,W;AAIa,U;;;;;;;;;;;;;;;;;;ACVvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaI,oB;AACT,sCAA2BC,WAA3B,EAA6DC,cAA7D,EAAqGC,MAArG,EAAqH;AAAA;;AAA1F,eAAAF,WAAA,GAAAA,WAAA;AAAkC,eAAAC,cAAA,GAAAA,cAAA;AAAwC,eAAAC,MAAA,GAAAA,MAAA;AAAkB;;;;qCAExG;AAAA;;AAGX,iBAAKD,cAAL,CAAoBE,WAApB,CAAgCC,SAAhC,CAA0C,UAACC,MAAD,EAAY;AAClD,kBAAIA,MAAM,CAACC,IAAX,EAAiB;AACb,qBAAI,CAACN,WAAL,CAAiBO,cAAjB,CAAgCF,MAAM,CAACC,IAAvC,EAA6CD,MAAM,CAACG,KAApD;AACH,eAFD,MAEO,CACH;AACA;AACH;AACJ,aAPD;AAUA,iBAAKR,WAAL,CAAiBS,WAAjB,CACGC,IADH,CAEM,8DAAO,UAACC,UAAD;AAAA,qBAAgBA,UAAhB;AAAA,aAAP,CAFN,EAIGP,SAJH,CAIa,UAACQ,CAAD;AAAA,qBAAO,KAAI,CAACV,MAAL,CAAYW,QAAZ,CAAqB,CAAC,GAAD,CAArB,CAAP;AAAA,aAJb;AAKH;;;;;;;yBArBQd,oB,EAAoB,0H,EAAA,+H,EAAA,uH;AAAA,O;;;cAApBA,oB;AAAoB,yC;AAAA,gB;AAAA,e;AAAA;AAAA;ACVjC;;AAAI;;AAAmB;;;;;;;;wEDUVA,oB,EAAoB;gBALhC,uDAKgC;iBALtB;AACPe,oBAAQ,EAAE,kBADH;AAEPC,uBAAW,EAAE,+BAFN;AAGPC,qBAAS,EAAE,CAAC,+BAAD;AAHJ,W;AAKsB,U","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SpotifyAuthComponent } from './spotify-auth/spotify-auth.component';\r\n\r\nconst routes: Routes = [{ path: 'authorized', component: SpotifyAuthComponent }];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { SpotifyAuthComponent } from './spotify-auth/spotify-auth.component';\r\n\r\n@NgModule({\r\n    declarations: [SpotifyAuthComponent],\r\n    imports: [CommonModule, AuthRoutingModule],\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { filter, tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'rbc-spotify-auth',\r\n    templateUrl: './spotify-auth.component.html',\r\n    styleUrls: ['./spotify-auth.component.scss'],\r\n})\r\nexport class SpotifyAuthComponent implements OnInit {\r\n    public constructor(private authService: AuthService, private activatedRoute: ActivatedRoute, private router: Router) {}\r\n\r\n    public ngOnInit(): void {\r\n\r\n\r\n        this.activatedRoute.queryParams.subscribe((params) => {\r\n            if (params.code) {\r\n                this.authService.getAccessToken(params.code, params.state);\r\n            } else {\r\n                // this means they declined or it messed up\r\n                // params should have error and state\r\n            }\r\n        });\r\n\r\n\r\n        this.authService.authorized$\r\n          .pipe(\r\n              filter((authorized) => authorized)\r\n          )\r\n          .subscribe((x) => this.router.navigate(['/']));\r\n    }\r\n}\r\n","<h3>Authorizing&hellip;</h3>"]}